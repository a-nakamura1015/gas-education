[
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/built_in_object/page_2_5_1/",
	"title": "組み込みオブジェクト",
	"tags": [],
	"description": "",
	"content": "組み込みオブジェクトとは "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/object_mechanism/page_2_4_1/",
	"title": "オブジェクト",
	"tags": [],
	"description": "",
	"content": "オブジェクトとは "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/control_syntax/page_2_2_1/",
	"title": "処理を分岐させる",
	"tags": [],
	"description": "",
	"content": "分岐処理とは  if文  if else 文とelse if文  比較演算子とは  論理演算子とは  switch文 "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/basic_syntax/page_2_1_1/",
	"title": "ステートメント",
	"tags": [],
	"description": "",
	"content": "ステートメントについて JavaScriptはスクリプトを実行すると、原則上から順に1行ずつ処理が実行されていきます。\nこの処理の最小単位をステートメントと呼びます。\nステートメントは単語の途中でない限り、改行を入れることができます。\n（あくまで、改行と入れることができるという話であり、コードの可読性が下がるようであれば無闇に改行を入れることはお勧めできません。）\nfunction myFunction() { console.log( \u0026#39;Hello GAS!\u0026#39; ); } また、ステートメントの最後にはセミコロン（;）をつけることがルールとなっていますが、 セミコロンをつけなくても大抵のコードは実行されます。\nただし、稀にセミコロンをつけなかったためにエラーが発生するケースもあるため、 ステートメントの最後にはセミコロン（;）をつける ようにしましょう。\n"
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/page_1/",
	"title": "はじめに",
	"tags": [],
	"description": "",
	"content": "前提条件  GASの開発環境が整備されていること（Chapter1が完了していること）  目標のゴール  GASをコーディングをする上で必要となるJavaScriptの基礎が身につくこと  入門編でご説明した通り、GASのベースはJavaScriptです。 JavaScript基礎編では、GASの開発で使用するJavaScriptの構文やオブジェクトについて解説いたします。\nJavaScriptの構文とオブジェクトを理解することで、GASの実装効率を大幅にあげることができます。\nそれではJavaScript基礎編のハンズオンをはじめましょう。\n"
},
{
	"uri": "http://a-nakamura1015/gas-education/introduction/page_1/",
	"title": "はじめに",
	"tags": [],
	"description": "",
	"content": "前提条件  Google アカウントがあること Google Chrome をインストールしていること インターネットにつながるPCがあること  目標のゴール  Google Apps Script でコーディングをして、作成した関数を実行できること。  それでは入門編のハンズオンをはじめましょう。\n"
},
{
	"uri": "http://a-nakamura1015/gas-education/introduction/",
	"title": "入門編",
	"tags": [],
	"description": "",
	"content": "Chapter 1 入門編 Google Apps Script でコーディングしてみよう！ "
},
{
	"uri": "http://a-nakamura1015/gas-education/web/page_1/",
	"title": "はじめに",
	"tags": [],
	"description": "",
	"content": "前提条件  Google アカウントがあること Google Apps Script である程度スプレッドシートを操作できること  目標のゴール  Google スプレッドシートをDBで代用したWebアプリケーションが作成できる  Webアプリケーションとは それではWebアプリ編のハンズオンをはじめましょう。\n"
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/built_in_object/page_2_5_2/",
	"title": "Numberオブジェクト",
	"tags": [],
	"description": "",
	"content": "Numberオブジェクトとは "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/object_mechanism/page_2_4_2/",
	"title": "プロパティ",
	"tags": [],
	"description": "",
	"content": "プロパティとは "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/control_syntax/page_2_2_2/",
	"title": "処理を繰り返し行う",
	"tags": [],
	"description": "",
	"content": "繰り返し処理とは  while文  for文  for in文 "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/basic_syntax/page_2_1_2/",
	"title": "関数",
	"tags": [],
	"description": "",
	"content": "関数とは 入門編で少し解説いたしましたが、関数 とは一連の処理をひとまとめにして名前をつけたものです。\n関数を実行する際は関数名を指定して呼び出すことにより、関数を実行することができます。\n関数を作り方にはルールがあり、以下のように function キーワード で定義します。\nfunction 関数名() { 処理 } ここまではデフォルトの「myFunction」という名前の関数を実行してきましたが、 関数名は任意の設定することができます。\n関数名はその関数がどのような処理を行うかがイメージしやすい名前をつけるようにしましょう。\n例えば、「ユーザー名を取得する関数」であれば、「getUserName」とするとわかりやすいですよね。\nまた、波括弧（{}）で囲った箇所は、複数のステートメントをまとめたもので ブロック といいます。\nこのブロックは今後の説明する構文で重要な役割を果たします。\nブロックは改行しないで記述することはできますが、改行を入れたほうが読みやすいとコードになります。\n下記の例で見比べると一目瞭然ですね。\nfunction myFunction() {console.log(\u0026#39;Hello GAS\u0026#39;);} function myFunction() { console.log(\u0026#39;Hello GAS\u0026#39;); } コーディングする際の注意点 JavaScriptでコーディングする際は基本的に半角英数字と半角記号のみを使用します。\n逆にいうと、全角文字は使用することができません。（後述の文字列やコメントでは使用できます。）\nまた、JavaScriptは同じアルファベットでも大文字と小文字を区別します。 そのため、下記のようなコードを記述するとスクリプトの実行時にエラーが発生します。\nfunction myFunction() { console.Log(\u0026#39;Hello GAS!\u0026#39;) } 実行すると、「TypeError：オブジェクトconsoleで関数Logが見つかりません。」というエラーが発生します。\nこのように、タイプミスで大文字と小文字を間違えたりするとエラーとなってしまいます。\nスクリプトエディタには自動補完機能があるので、この機能を駆使することでタイプミスを防ぐことができます。\n"
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/basic_syntax/",
	"title": "基本構文を学ぼう",
	"tags": [],
	"description": "",
	"content": "Chapter 2 - 2 JavaScriptの基本構文 JavaScriptの基本となる構文を学びましょう！ "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/",
	"title": "JavaScript基礎編",
	"tags": [],
	"description": "",
	"content": "Chapter 2 JavaScript基礎編 JavaScriptの基礎を身につけよう！ "
},
{
	"uri": "http://a-nakamura1015/gas-education/introduction/page_2/",
	"title": "Google Apps Script とは",
	"tags": [],
	"description": "",
	"content": "Google Apps Script とは Google Apps Scriptは、Google社が提供するローコードプラットフォームです。\n厳密には違うのですが、プログラミング言語といっても差し支えないと思います。\n（以降、Google Apps Script を GAS と呼称します。）\nGASを使うことで、GmailやGoogleカレンダー、Google スプレッドシートなどの Google が提供するアプリケーションをプログラミングによって操作することができるようになります。\n＜図を差し込む＞\n各アプリケーション単体の動作はもちろん、アプリケーション同士の連携させて動作させることもできます。\nまた、HTMLやCSS、JavaScriptでWebアプリケーションを作成し、公開することもできます。\n一方で、GAS独自のルールがあるため、そのルールを把握した上でコーディングをする必要があります。\nこの入門編ではGASを学ぶ上で土台となる基礎知識を身につけていきます。\nGASのベースはJavaScript！ GASはJavaScriptというプログラミング言語がベースになっています。\nJavaScriptはブラウザ上で動作する標準のスクリプト言語として使われており、 さらにサーバーの処理を行う言語としても活用されています。\nスクリプト言語は簡易にコーディングと実行ができることが特徴です。\nそのため、プログラミングが初めてという方でも比較的容易に習得することできます！\nGASはクラウド上で動く！ GASの特徴は、コーディングをする場所もプログラムが実行される場所も全てGoogleのクラウドサーバー上にあります。\n例えば、Excel VBA の場合はコーディングやプログラムの実行をPC内で行われます。\n一方、GASはブラウザ上でコーディングを行い、プログラムの実行はクラウドサーバー上で行われます。\n＜図を差し込む＞\nGASの最大の利点は 開発環境の整備が不要 であることです。 スクリプトが実行されるサーバーも、コーディングを行うエディタもすべてGoogleが用意してくれています。\nまた、スクリプトはGoogleのクラウドサーバー上で動作するため、PCやブラウザが起動していなくてもスクリプトを実行することができます。 トリガー という機能を使うことで、時間を指定して特定の時間にスクリプトを実行させることができます。\n開発に必要なもの GASで開発をするのに必要なものは下記の３つだけです。\n Google アカウント（G Suite でも無料のGoogleアカウントでもどちらでもOKです。） ブラウザ（Google Chrome を推奨） インターネットに接続できるPC（WindowsOSでもMacOSでもどちらでもOKです。）  他のプログラミング言語と比べても敷居はとても低く、 GASの門戸は常に開かれています。\n Google Apps とは Google Apps はGoogle が提供しているアプリケーションを意味していますが、GASはGoogleが提供しているすべてのアプリケーションを操作できるわけではありません。\nどのアプリケーションを操作できるかは、後述の「リファレンスについて」で確認していきましょう。\n Google アカウントについて 皆さんはGoogleアカウントを無料で作成してサービスを利用することができます。\nその一方で、これらのサービスを企業や組織向けに提供されている有償版のサービスもあります。 これは G Suite と呼ばれており、企業や組織向けのサービスを利用することができます。\nG Suite のプランにはBasic/Bussinessというプランが用意されています。\n無料アカウントと G Suite の各プランの違いは下記の通りとなっております。\n   項目 無料アカウント G Suite for Basic G Suite for Bussiness     料金 無料 680円/月額 1,360円/月額   メールアドレス ドメイン名はgmail.comのみ 独自ドメインを設定できる 独自ドメインを設定できる   サポート なし 24時間365日サポート 24時間365日サポート   管理コンソール なし ユーザー管理、端末管理、セキュリティ設定が可能 ユーザー管理、より高度な端末管理とセキュリティ設定が可能   クラウドストレージ容量 15GB 30GB 無制限    無料のアカウントでも、GASの基本的な機能を利用することは可能です。 しかし、GASの実行の際に一部制限があり、G Suite の方がその制限が緩くなっています。\nその一例は下記の通りです。 公式ガイド\n   項目 無料アカウント G Suite for Basic G Suite for Bussiness     スクリプト実行時間 6分/実行 6分/実行 30分/実行   カスタム関数実行時間 30秒/実行 30秒/実行 30秒/実行   トリガーの総実行時間 90分/日 3時間/日 6時間/日     GASで操作できるアプリケーションについて GASで多くのアプリケーションを操作することができますが、 この機能は「サービス」と呼ばれており、このサービスは３つのグループに分けられています。\n   グループ 概要 提供されるサービス例 サービスの利用方法     G Suite Services G Suite に含まれるアプリケーションを操作するサービス群 Gmail、Calendar、スプレッドシートなど デフォルトで利用可能   Script Services ユーティリティサービス群 Cache、HTML、JDBCなど デフォルトで利用可能   Advanced Google Services G Suite Services よりも高度な操作を行うことができるサービス群 BigQuery、AdminSDKなど デフォルトで利用可能    G Suite Services 主に G Suite で提供されている各アプリケーションを操作するサービスが提供されています。\nG Suite のすべてのサービスを操作できるわけではないのですが、 これらのサービスを操作することで業務効率化を図ることができるアプリケーションやツールを作ることができます。\n Calendar：カレンダー Contacts：連絡先 Document：ドキュメント Drive：ドライブ Forms：フォーム Gmail Groups：グループ Language：翻訳 Maps：マップ Slides：スライド Spreadsheet：スプレッドシート  Script Services Script Servicesでは、GAS 全般で横断的に利用するユーティリティとして機能するサービスが提供されています。\n例えば、ログを出力したり、ダイアログを表示したりなど便利な機能が揃っています。\n Base Cache Charts Content HTML JDBC Lock Script Url Fetch  Advanced Google Services GASには G Suite Service に含まれないアプリケーションや、より高度な操作を可能にするサービスが提供されています。\nこれらは 拡張サービス（Advanced Google Services）と呼ばれていて、 G Suite Serviceでは操作ができないBigQueryやAdminSDKが操作することができ、 G Suite Serviceで用意されている GmailやDriveなどのアプリケーションに対してより高度な処理を行うことができます。\nデフォルトでは無効になっているため、利用したいサービスごとに有効にする必要があります。\n GASを学ぶ上で気をつけること GAS = JavaScriptではない 先述した通り、GASのベースはJavaScriptではあるものの、JavaScriptのすべての機能を利用できるわけではありません。\nGASで利用できる JavaScript は、基本構文、制御構文、演算子、関数、組み込みオブジェクトなどの基本部分であるECMAScript（エクマスクリプト）のみです。 また、ECMAScriptは高頻度でバージョンアップを繰り返しているのですが、 その更新にGASは対応しきれていないため、ECMAScriptであっても記述できない構文などもあります。\nまた、JavaScriptを大きく分けると画面の操作を行う フロントエンド と 外部サービスへの連携やデータベースの処理などを行う サーバーサイド に分けられます。\nGASはサーバーサイドに分類するため、フロントエンドのJavaScriptの機能を利用することができません。\n例えば、下記のような画面にアラートを表示するという初歩的なコードすら実行することができません。\nalert(\u0026#39;Hello World!\u0026#39;) GASの実行には制限がある 先述した通り、GASはGoogleのサーバー上で動作するため、仮にあるユーザーが極端にサーバーに負荷がかかる処理を行うと、GAS全体に影響を及ぼす恐れがあります。\nこのような状況を避けるためにGASにはいくつかの機能に対して制限が設けられています。 詳細は下記リンク先の公式ガイドをご参照ください。\n公式ガイド\n特に気をつけるべきは スクリプトの実行時間 で、無料アカウントや G Suite for Basic の場合は6分、 G Suite for Bussiness の場合は30分で処理が強制終了してしまいます。\nそのため、GASで開発を行う際は扱うデータ量と処理速度に注意をする必要があります。\n リファレンスについて 具体的にGASがどのようなサービスを提供しているかは下記リンク先のリファレンスで確認することができます。\nどのサービスを利用すればよいか迷ったときは、このリファレンスを参考に吟味するようにしましょう。\n公式リファレンス\nまた、Google社はGASを不定期にアップデートしているため、GASで開発する際は利用するサービスを必ずリファレンスで確認するようにしましょう。\n"
},
{
	"uri": "http://a-nakamura1015/gas-education/web/page_2/",
	"title": "Web画面を表示してみよう",
	"tags": [],
	"description": "",
	"content": "まずは Google Apps Script でアプリケーションを作成する第一歩として、 ブラウザにWeb画面を表示してみましょう。\nスクリプトの種類 Google Apps Script には2種類のスクリプトがあります。\n Container Bound Script Standalone Script  それぞれのスクリプトの違いについて確認していきましょう。\nContainer Bound Script Google スプレッドシートやドキュメントなどの各アプリケーションのメニューから作成することができるスクリプトです。\n＜スクリプトを作成する手順＞\n Google スプレッドシートやドキュメントなどのアプリケーションを開きます。 上部メニューの|[ツール] \u0026gt; [スクリプトエディタ]を選択します。  ＜メリット＞\n バインドしているファイルを簡単に参照できる バインドしているファイルから Google Apps Script を実行できる  この方法で作成されたスクリプトと同アプリケーションはバインド（結びつく）しているため、 スプレッドシートの場合は下記のメソッドによりブラウザで開いている同スプレッドシートを操作することができます。\nvar spreadsheet = SpreadsheetApp.getActiveSpreadsheet(); var sheet = spreadsheet.getActiveSheet(); var range = sheet.getActiveRange(); また、onOpen関数を利用してアプリケーションにメニューを追加し、 そのメニューからスクリプトエディタでコーディングした関数を実行することができます。 他にも、図形にコーディングした関数を埋め込み、図形をクリック時に埋め込めんだ関数を事項することもできます。\n要約しますと、この方法で作成したスクリプトはExcelでいうVBAに近い感覚で利用することができます。\nStandalone Script Container Bound Script とは対照的に、どのアプリケーションにもバインド（結びつく）していないスクリプトです。 作成されたスクリプトは Googleドライブ に表示されます。\n＜スクリプトを作成する手順＞\n Google Chrome で Google ドライブを開きます。 Google ドライブの左上に表示されている[新規]ボタンをクリックします。  で表示されたメニュー内の[その他]をクリックします。    で表示されたメニュー内の[Google Apps Script] をクリックします。    ＜メリット＞\n 利用者にスクリプトエディタを編集されるリスクがない Google ドライブで管理がしやすい  一見、Container Bound Script でスクリプトを作成した方が始めやすく、 バインドしたファイルを簡単に参照できるメソッドも利用できるため扱いやすいです。 しかし、作成したスクリプトを他者と共有して利用したい場合は、 利用者もスクリプトエディタを編集することができてしまいます。 つまり、いつの間にか利用者によってスクリプトの内容が書き換えられてしまうことが起こる可能性があります。\n一方で、Standalone Script はスクリプトファイルを共有したアカウントのみ編集することが、ユーザーによって編集されるリスクがありません。 また、作成したスクリプトは Google ドライブに保存されているため管理がしやすいのも特徴です。\n（Container Bound Script の場合は対象のファイルを開かなければスクリプトエディタを開くことができません。また、Google ドライブにスクリプトが表示されません。）\n補足\nGoogle ドライブでは Container Bound Script を管理できないとお話ししましたが、 作成したスクリプトは下記リンク先のダッシュボードから簡単にアクセスすることができます。 https://script.google.com/home\n今回のWebアプリ編のハンズオンでは Standalone Script で進めていきます。 Container Bound Script でも問題なく行うことができますが、 後々の管理のことを考えて Standalone Script で進めていきましょう。\n HTMLファイルの作り方について Webアプリを作るには画面を作る必要がありますが、画面はHTMLファイルで作ることができます。 HTMLファイルは下記の手順で作成することができます。\n 上部メニューから[ファイル] \u0026gt; [New] \u0026gt; [HTMLファイル]　を選択する。 表示されたダイアログの入力欄にファイル名を設定して、[OK] ボタンをクリックします。 ※ ここではファイル名を「index」としてください。 スクリプトエディタ上に「index.html」が作成されます。  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;base target=\u0026quot;_top\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  doGet関数について ユーザーが公開したWebアプリにアクセスした場合にdoGet関数は実行されます。（別のプログラムからWebアプリにHTTPのGETリクエストが送信される場合も同じく実行されます。）\nWeb画面を表示するにはdoGet関数の戻り値として HtmlServiceオブジェクト を指定する必要があります。\n下記のようにコーディングをしますと、index.htmlを表示する画面として指定することができます。\nコード.gs\nfunction doGet() { return HtmlService.createTemplateFromFile(\u0026#39;index\u0026#39;).evaluate(); } index.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;base target=\u0026quot;_top\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; Hello World! \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Webアプリのデプロイ方法について "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/built_in_object/page_2_5_3/",
	"title": "Stringオブジェクト",
	"tags": [],
	"description": "",
	"content": "Stringオブジェクト "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/object_mechanism/page_2_4_3/",
	"title": "メソッド",
	"tags": [],
	"description": "",
	"content": "メソッドとは "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/function/page_2_3_3/",
	"title": "値渡しと参照渡し",
	"tags": [],
	"description": "",
	"content": "値渡しと参照渡し "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/function/",
	"title": "関数を学ぼう",
	"tags": [],
	"description": "",
	"content": "Chapter 2 - 3 JavaScriptの関数 JavaScriptの関数の仕組みについて学びましょう！ "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/control_syntax/page_2_2_3/",
	"title": "例外処理でエラーを検知する",
	"tags": [],
	"description": "",
	"content": "try catch finally文 "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/control_syntax/",
	"title": "制御構文を学ぼう",
	"tags": [],
	"description": "",
	"content": "Chapter 2 - 3 JavaScriptの制御構文 JavaScriptの制御構文を学びましょう！ "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/basic_syntax/page_2_1_3/",
	"title": "コメント",
	"tags": [],
	"description": "",
	"content": "コメントとは コメント とは、スクリプト内のメモ書きのことをいいます。\nこのコメントはスクリプトの実行時には無視されるため、実行されることはありません。\nでは、どのようなときにこのコメントを使うのでしょうか？\n例えばですが、しばらく期間をあけてコードを読み返した際に、自身がどのような考えで実装したのか思い出すのは大変です。\nそのようなときにコメントが書かれているとこのような苦労をせずに済みます。\n同様に、自身ではなく他の人にソースを読んでもらうことがあった場合も、 自身がどのような考えで実装したのかを伝えることができます。\n1行のみコメントにしたい場合は、その文頭に「//」を入れることでコメントにすることができます。\nfunction myFunction() { // 実行されないので半角英数字や半角記号以外の文字を入れることができます。  console.log(\u0026#39;Hello GAS!\u0026#39;); // 行の後ろにも入れることができます。 } また、複数行をコメントにしたい場合は「/*」と「*/」で囲います。\nfunction muFunction() { /* 1行目 2行目 */ console.log(\u0026#39;Hello GAS!\u0026#39;); } コメントの活用方法 コーディングをしていて、「このステートメントは実行したくないな」というときにもコメントは活躍します。\nこのように一時的にコメントにすることを「コメントアウト」といいます。\n// 2回目のconsole.log()は実行したくない場合 function myFunction() { console.log(\u0026#39;Hello GAS!\u0026#39;); // 2回目のconsole.log()をコメントアウト  // console.log(\u0026#39;Hello GAS!\u0026#39;); }  コメントアウトはショートカットキーがあり、コメントアウトしたい行を選択した上で、WindonwsはCtrl + /、Macはcontrol + /でコメントアウトをすることができます。逆に、コメントを解除したい場合も同じ手順で行うことができます。\n "
},
{
	"uri": "http://a-nakamura1015/gas-education/introduction/page_3/",
	"title": "前準備をしよう",
	"tags": [],
	"description": "",
	"content": "まずは開発環境を整えましょう。\nとは言っても、GASはローコードプラットフォームであるためほとんど手間がかかりません。\nGoogleアカウントでログイン まずはGoogle アカウントでログインをしましょう。\nGoogle アカウントは一つですが、ログインするところは2つあります。\n Google Chrome にログイン Google のサービス（G Suite）にログイン  実は「Google のサービス（G Suite）にログイン」のみでGASは利用できるのですが、 Google Chrome へログインしているアカウント と　Google のサービス（G Suite）にログインしているアカウント が不一致の場合、 意図しない挙動を起こすことがあります。\n必ず Google Chrome へログインしているアカウント と Google のサービス（G Suite）にログインしているアカウント が一致していることを確認した上でこの先の手順を進めていきましょう。\n  Google Chrome を起動します。 ＜画像差し込み＞\n  Google Chrome にログインします。 ＜画像差し込み＞\n  Google Chrome のURLバーに「google.com」と入力してEnterキーを押します。 ＜画像差し込み＞\n  Googleホーム画面の右上にある「ログイン」ボタンをクリックします。 ＜画像差し込み＞\n  Google Chrome にログインします。 ＜画像差し込み＞\n  この状態になればログインは完了です。 ＜画像差し込み＞\n   スプレッドシートを開く 今回のハンズオンではスプレッドシートからスクリプトエディタを開いてみましょう。\n  Google ドライブを起動します。 ＜画像差し込み＞\n  Google ドライブの画面の左上にある「新規」ボタンをクリックします。 ＜画像差し込み＞\n  表示されたメニュー内から「Google スプレッドシート」を選択します。 ＜画像差し込み＞\n   スクリプトエディタを開く それでは、いよいよ スクリプトエディタ を開きます。\nスクリプトエディタ は、GASのスクリプトの編集、実行、デバックなどを行うことができるエディタで、便利な機能が多数搭載されています。\n  メニューから[ツール]\u0026gt;「スクリプトエディタ」を選択します。 ＜画像差し込み＞\n  この画面が表示されればOKです。 ＜画像差し込み＞\n  プロジェクト名を設定する。 この先の手順を進めるためには、まずプロジェクト名を設定する必要があります。\nプロジェクト名は画面左上に表示されていて、デフォルトでは「無題のプロジェクト」となっています。\n「プロジェクトってなんだろう？」と疑問に思われるでしょうが、 これから作成するGASファイルをまとめているフォルダのようなイメージになります。 プロジェクト名は自由につけていただいて構わないのですが、 今回のハンズオンではプロジェクト名を「はじめてのGAS」と設定しましょう。\n  プロジェクト名をクリックする。 ＜画像差し込み＞\n  プロジェクト名を入力して、「OK」ボタンをクリックする。 ＜画像差し込み＞\n  プロジェクト名が設定されれば成功です。 ＜画像差し込み＞\n  これでGASでコーディングするための準備は完了です！\nいよいよGASでコーディングをしていきましょう。\n"
},
{
	"uri": "http://a-nakamura1015/gas-education/web/page_3/",
	"title": "Web画面を編集してみよう",
	"tags": [],
	"description": "",
	"content": "Webアプリを更新する方法について HTMLについて CSSについて JavaScriptについて "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/built_in_object/page_2_5_4/",
	"title": "Dateオブジェクト",
	"tags": [],
	"description": "",
	"content": "Dateオブジェクト "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/object_mechanism/",
	"title": "オブジェクトの仕組みを学ぼう",
	"tags": [],
	"description": "",
	"content": "Chapter 2 - 4 オブジェクトの仕組み JavaScriptのオブジェクトの仕組みを学びましょう！ "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/function/page_2_3_4/",
	"title": "関数リテラル",
	"tags": [],
	"description": "",
	"content": "関数リテラル "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/basic_syntax/page_2_1_4/",
	"title": "変数",
	"tags": [],
	"description": "",
	"content": "変数とは 変数とは、スクリプトを実行する際に生成されるデータを格納する箱のことをいいます。\n変数を使うことで、データを一時的に保管したり変数名で呼び出して格納した値を何度でも使用することができます。\n変数を実際に使うには、その変数を 宣言 する必要があります。\nJavaScriptで変数を宣言する際は行頭に var をつけて、その後変数名を記述します。\nvar 変数名; var 変数名1, 変数名2, 変数名3; // カンマ区切りにすることで、1行で変数を複数宣言することもできます。 変数に値を代入する 変数にデータを格納することを 代入 といいます。\n代入は左辺に変数名を記述し、イコールを挟んで右辺に格納する値を記述します。\n変数名 = 値; 変数に値を代入したのち、その変数名を記述することで格納した値を呼び出すことができます。\n下記のサンプルでは「10」を変数numに代入して、その内容をログに出力しています。\nfunction myFunction() { var num; num = 10; console.log(num); // 10 } 変数の宣言時に値の代入をすることもでき、このことを 初期化 といいます。（2行のコードが1行になるのでスッキリしますね。）\nこの場合もカンマ区切りでまとめて初期化を行うことができます。\nfunction myFunction() { var num_1 = 10; var num_2 = 100, nume_3 = 1000; // まとめて初期化も可能  console.log(num_1); // 10  console.log(num_2); // 100  console.log(num_3); // 1000 } また、変数に代入したのち、変数に格納した値を上書きすることもできます。 上書きは変数に値を代入する方法と同じ方法で記述することができます。（宣言ではないので var は不要です。）\nfunction myFunction() { var num = 10; console.log(num); // 10  num = 100; console.log(num); // 100 }  定数とは 変数は上書きができるとご説明しましたが、ときには変数を上書きしたくないケースもあります。\nこのように上書きしたくないへんすうは 定数 として宣言して使用します。\n定数は変数と同じく名前をつけることができ、値を格納することもできますが、一度値を格納すると以降はその値を変更することができません。\nJavaScriptで定数を宣言する際は行頭に conost をつけて初期化を行います。\nconst 定数名 = 値; 下記のサンプルで定数が更新されないことを確認してみましょう。\nfunction myFunction() { const num = 10; num = 100; console.log(num); // 10 } 定数numに対して、100を再代入して上書きしようとしましたが、結果としてログに出力されたのは「10」です。\nこのように定数への再代入は行われません。\n識別子の命名規則 ここまでで変数、定数、関数に対して任意の名前をつけることができるとご説明してきました。\nこれらの名前は 識別子 といい、JavaScriptでは自由に名前をつけることができるのですが、実はルールが設けられています。\n 先頭文字は数字や記号文字を使うことができない。（記号文字のうちアンダースコア（_）とドル記号($)は使用できます。） 予約後は使用できない。 大文字と小文字は区別される。  予約語 はJavaScriptで特別な意味を持つ単語として決められているワードになります。\n例えば、変数宣言で使用するvarや、関数の定義で使用するfunctionがあります。\nJavaScriptの予約後は下記の通りです。\n break case catch continue debugger default delete do else finally for function if in instanceof new throw try typeof var void while with  識別子の命名のコツ 識別子のルールが守られていれば自由に名前をつけることができますが、名前の付け方が統一されていて、かつ読みやすい名前ですとコーディングがしやすいですよね。 以下のポイントを守って名前をつけるとコーディングがしやすくなります。\n変数の中身や関数の内容がわかる名前をつける 例えば、名前を変数に格納したい場合ですと皆さんはどのような変数名をつけますか？\n下記のサンプルでは、文字列の「Taro」を変数nameと変数numに格納しています。\n変数名をnameにすると、格納されている値は名前だと想像することができます。\nその一方、変数名がnumにすると、格納されている値は一見数字であると想像してしまいます。\n関数の名前も同様にどのような処理が行われているイメージがしやすい名前をつけるようにしましょう。\nvar name = \u0026#39;Taro\u0026#39;; // Good! var num = \u0026#39;Taro\u0026#39;; // NG! 日本語やローマ字は使わず、英語を使う JavaScriptの予約後は英語なので、識別子は英語で統一するとコードが読みやすくなります。\n日本語やローマ字で変数宣言や関数の定義をすることはできますが、統一感ないと読みにくくなるためおすすめはできません。\nvar name = `Taro`; // Good! var 名前 = `Taro`; // NG! var namae = `Taro`; // NG! 変数名と関数名はキャメル記法、定数名にはスネーク記法を使う キャメル記法 というのは、複数の英単語で変数名や関数名をつける際に2つ目以降の頭文字を大文字にする記法です。\nキャメルというのはラクダ（Camel）が由来なのですが、頭文字を大文字にするとちょうどそこがコブのように見えることから キャメル記法 と言われています。\nもうひとつの記法として スネーク記法 と呼ばれるものがあります。こちらは英単語をアンダースコア（_）でつないでいく記法です。\n// 関数名はキャメル記法 function getUserName() { // 変数名はキャメル記法  var userName = \u0026#39;Taro\u0026#39;; // 定数はスネーク記法  const greeting_word = \u0026#39;Hello \u0026#39;; console.log(greeting_word + userName); // Hello Taro } これらのポイントを意識しながらコーディングをすると、自然と読みやすいスクリプトになっていきます。\n"
},
{
	"uri": "http://a-nakamura1015/gas-education/introduction/page_4/",
	"title": "GASでコーディングしてみよう",
	"tags": [],
	"description": "",
	"content": "関数とは では早速、GASのスクリプトをコーディングしていきましょう。\nスクリプトエディタには既に下記のコードが記述されていると思います。\nfunction myFunction() { } これは関数と呼ばれ、一連の処理をひとまとめにして名前をつけたものになります。\n{ と } の間に1行空いていますが、この間に処理をコーディングしていきます。\nコーディングの際は下記のルールに気をつけてください。 下記のルールが守られていない場合は、スクリプトを保存する際にエラーとなります。\n  英数字、記号はすべて 半角 であること\n  アルファベットの大文字、小文字を間違えないこと（myFunctionとMYFUNCTIONとでは別の関数として認識されます。）\n  ピリオドやセミコロンなどの記号の入力漏れや打ち間違いがないこと\n   メッセージを表示してみる 今回のハンズオンでは「Hello World!」というメッセージをスプレッドシートに表示してみたいと思います。\nmyFunction関数の　{ と } の間に下記のようにコードを追記してください。\nまた、追記する際は字下げ（インデント）をしてコードを読みやすくしましょう。 字下げ（インデント）はTabキーをクリックすると行えます。\nfunction myFunction() { Browser.msgBox(\u0026#39;Hello World!\u0026#39;); } スクリプトを編集した場合は保存をする必要があります。\nスクリプトを編集すると、「コード.gs」の前に赤いアスタリスクマークが表示されます。\nスクリプトエディタ上のスクリプトは編集をしても自動的に更新はなされないため、編集したスクリプトを反映させるには保存する必要があります。\nこの赤いアスタリスクマークが表示されている場合は保存がなされていない状態です。\n＜画像差し込み＞\nツールメニューバーの「保存」ボタン（ディスクのアイコン）をクリックすると保存することができます。\n赤いアスタリスクのマークがなくなれば保存は完了です！\n＜画像差し込み＞\nスクリプトの保存はショートカットキーがあり、WindonwsはCtrl + S、Macはcommand + Sで保存することができます。\n 保存が完了すれば、最後にスクリプトの実行です。\nスクリプトの実行はツールメニューバーの「実行」ボタン（再生のアイコン）をクリックすると実行することができます。\nこの際にツールバーに実行する関数の名前が表示されているかを確認しましょう。\n＜画像差し込み＞\nスクリプトの実行はショートカットキーがあり、WindonwsはCtrl + R、Macはcommand + Rで実行することができます。\n 初回の実行の際は「承認が必要です」というダイアログが表示します。 スクリプトを実行するユーザーに対して、操作対象のスプレッドシートへアクセスする必要があります。\n＜画像差し込み＞\n「許可を確認」をクリックすると、さらに小画面が表示されアカウントの一覧が表示されます。\nここで今回のGASを実行するアカウントを選択します。\n＜画像差し込み＞\n最後に表示された画面の「許可」ボタンをクリックすると、スクリプトが実行されます。\n＜画像差し込み＞\n実行するとスクリプトエディタが表示されており、特に変化は見当たらないと大みます。\nでは、スプレッドシートの画面に切り替えてみてください。 下記のように「Hello World!」とメッセージが表示されているはずです。\n（メッセージは「OK」ボタンもしくは右上の「×」ボタンで閉じることができます。）\n＜画像差し込み＞\n 関数を更新してみる 作成した関数はもちろん編集することができます。\n先ほど作成したmyFunction関数で表示したメッセージを「Hello World!」から「Hello GAS!」に変更してみましょう。\nfunction myFunction() { Browser.msgBox(\u0026#39;Hello GAS!\u0026#39;); } 先ほどと同じ手順で「保存」→「実行」をしてみましょう。\n（2回目以降は承認の手続きは不要のため、承認のダイアログは表示されません。）\n下記のように「Hello GAS!」とメッセージが表示されていれば成功です！\n＜画像差し込み＞\n"
},
{
	"uri": "http://a-nakamura1015/gas-education/web/page_4/",
	"title": "Web画面からGASの関数を実行してみましょう",
	"tags": [],
	"description": "",
	"content": "ここまでは主にクライアントサイドのコーディングをしてきましたが、 ここからはサーバーサイドのコーデイングをしていきましょう。 Google Apps Script のサーバーサイドは.gsファイルにコーディングします。\nGoogle Apps Script の関数の作り方について それでは.gsファイルにコーディングをしてみましょう。 今回はスプレッドシートから値を取得する関数と、スプレッドシートへ値を設定する関数を作成してみます。\nコード.gs\nvar SHEET_ID = \u0026#39;シートのID\u0026#39; var SHEET_NAME = \u0026#39;シートの名前\u0026#39; function getSheetData() { // 1. スプレッドシートを特定して取得します。  var spreadsheet = SpreadsheetApp.openById(SHEET_ID); // 2. シートを特定して取得します。  var sheet = spreadsheet.getSheetByName(SHEET_NAME); // 3. セル（範囲）を特定して取得します。  var range = sheet.getRange(\u0026#39;A1\u0026#39;); // 4. 対象のセルの入力値を返します。  return range.getValue(); } function setSheetData() { // 1. スプレッドシートを特定して取得します。  var spreadsheet = SpreadsheetApp.openById(SHEET_ID); // 2. シートを特定して取得します。  var sheet = spreadsheet.getSheetByName(SHEET_NAME); // 3. セル（範囲）を特定して取得します。  var range = sheet.getRange(\u0026#39;A1\u0026#39;); // 4. 対象のセルの入力値を返します。  range.setValue(\u0026#39;hello!\u0026#39;); }  シートのID と シートの名前 は作成した Google スプレッドシートの ID と シートの名前 を入力してください。\n これで Google Apps Script の関数は用意できました。 次は用意した関数がクライアントサイドから呼び出してみましょう。\n google.script.run について クライアントサイドでgoogle.script.runを使用すると、サーバーサイドの Google Apps Script 関数を実行することができます。\n【リファレンス】google.script.run\nそれでは、早速先ほど作成したsetSheetData()を呼び出してみましょう。\nindex.html\n\u0026lt;script\u0026gt; google.script.run.setSheetData(); \u0026lt;/script\u0026gt; 今回はクライアントサイドで関数の中から呼び出さず、scriptタグの中にコーディングしているため、 画面が表示されるタイミングで実行されます。\n画面を表示したのち、対象のシートのA1セルに hello! と表示されるかを確認してみましょう。\n引数を渡す 先ほどは 対象のシートのA1セルに hello! と表示されるようにしましたが、 クライアントサイドで表示する値を設定できるようにしてみましょう。 setSheetData()に引数を渡せるようにコードを変更します。\n変更点は次の３点です。\n クライアントサイドでsetSheetData()を呼び出す際に、引数に値（\u0026lsquo;こんにちは！'）を設定する。 サーバーサイドのsetSheetData()が引数の値を受け取ることができるように、丸括弧内に変数 (value)を設定する。 最後のrange.setValue('hello!')の丸括弧内の\u0026rsquo;hello!\u0026lsquo;を変数（value）に置き換える。  index.html\n\u0026lt;script\u0026gt; google.script.run.setSheetData('こんにちは！'); \u0026lt;/script\u0026gt; コード.gs\nfunction setSheetData(value) { // 1. スプレッドシートを特定して取得します。 var spreadsheet = SpreadsheetApp.openById(SHEET_ID); // 2. シートを特定して取得します。 var sheet = spreadsheet.getSheetByName(SHEET_NAME); // 3. セル（範囲）を特定して取得します。 var range = sheet.getRange('A1'); // 4. 対象のセルの入力値を返します。 range.setValue(value); } 変更したのちWeb画面を更新して、対象のシートのA1セルにこんにちは！と出力されているかを確認しましょう。\n画面で入力した値をスプレッドシートに出力する 先ほど実行した関数によって、クライアントサイドから値を渡すことができることを確認できました。 次はクライアントサイドで入力した値をサーバーサイドに渡してみましょう。\nindex.html\n\u0026lt;input type='txt' id='msg' onclick='output()' /\u0026gt; \u0026lt;script\u0026gt; function output() { // 1. テキストボックスに入力した値を取得します。 var value = document.getElementById('msg').value; // 2. 取得した値を setSheetData関数の引数として設定して呼び出します。 google.script.run.setSheetData(value); } \u0026lt;/script\u0026gt; 変更したのちWeb画面を更新して、対象のシートのA1セルにテキストボックスに入力した値が出力されているかを確認しましょう。\n 同期処理と非同期処理について 次はサーバーサイドから値を取得してみましょう。 先ほどコーディングしたgetSheetData()を実行してみます。 index.htmlを下記の通りに変更したのち、Web画面を更新してアラートで値が表示されるかを確認してみましょう。\nindex.html\n\u0026lt;script\u0026gt; // 1. スプレッドシートから値を取得する var result = google.script.run.getSheetData(); // 2. 取得した値をアラートで表示する alert(result); \u0026lt;/script\u0026gt; アラートにはundefinedと表示されました。 これはalert(result)で表示しようとしている変数alertの中身が空っぽということになります。\ngetSheetData()が実行されなかったのでしょうか。\n実はgetSheetData()が実行されていますが、その戻り値が返ってくる前にalert(result)が実行されているのです。\nJavaScriptのアプリケーションは「シングルスレッド」で実行されます。\n「シングルスレッド」を端的に説明すると、 一度にひとつのことを実行していく処理 ということです。\nつまり、1度に1つの処理しかできない（並列処理ができない）のです。\nしかし、非同期処理により外部に処理を任せている間に自身の処理を進めることができます。\n同期処理とは 同期処理はコーディングした処理の上から順番に実行されるという意味です。 上から順番に実行されるのでシンプルですね。\n下記のスクリプトも同期処理で動いているため、アラートは「1」、「2」、「3」と順に表示されます。\n\u0026lt;script\u0026gt; alert(1); // ① alert(2); // ② alert(3); // ③ \u0026lt;/script\u0026gt; 非同期処理とは 非同期処理は外部に処理を任せている間に自身の処理を進めることができます。\n先ほどシートの値を取得しようとしたスクリプトで確認してみましょう。\nindex.html\n\u0026lt;script\u0026gt; // 1. スプレッドシートから値を取得する var result = google.script.run.getSheetData(); // 2. 取得した値をアラートで表示する alert(result); \u0026lt;/script\u0026gt; getSheetData()でブラウザから Google サーバーに処理を行うように命令をしています。（具体的にはシートから値を取得するように命令しています。）\nしかし、このように外部（Google サーバー）に処理を行うように命令した場合は、その処理結果（戻り値）を待たずにクライアントサイドのJavaScriptは順次処理を続行してしまいます。\nこれが非同期処理です。\nだけど、GAS関数の戻り値を受けとって同期処理を行いたいですよね。 それを実現するのがwithSuccessHandlerメソッドとwithFailureHandlerメソッドです。\n withSuccessHandler と withFailureHandler について withSuccessHandlerメソッドとwithFailureHandlerメソッドの特徴は 「クライアントサイドからGAS関数を呼び出したのちの処理を設定できる」 ことです。\nこれらのメソッドを活用することでGAS関数で取得した結果をクライアントサイドに表示することができます。\nしかし、活用するには コールバック関数 を理解する必要があります。\nコールバック関数とは 日常生活でコールバックと言いますと、「かかってきた電話にたいして電話をかけ直す（折り返し電話をする）」という意味で使われますね。 JavaScriptでコールバックは「後々呼び出すために定義した関数」という意味で使われます。 ただ、このコールバックされる関数は特別なことは何もなく、普通のJavaScriptの関数です。 では、具体的にどのように使用するのかを下記のようにHTMLを修正して確認してみましょう。\n\u0026lt;script\u0026gt; // 数値の2を返す関数（後々呼び出すためにコーディングされた関数） function getNumber() { return 2; } // 1. アラートで「1」を表示する。 alert(1); // 2. アラートで「getNumber関数の戻り値」を表示する。 alert(getNumber()); // 3. アラートで「3」を表示する。 alert(3); \u0026lt;/script\u0026gt; 上記ではgetNumber関数というコールバック関数をコーディングしています。 このコールバック関数をalert(getNumber());で呼び出して実行しています。 このように 即時実行するのではなく、後々実行するための関数を定義することができます。\nこれがwithSuccessHandlerメソッドとwithFailureHandlerメソッドとどのように関係があるのか？といいますと、 これらのメソッドは　クライアントサイドからGAS関数を呼び出したのちの処理を設定できる のですが、 GAS関数を呼び出したのちの処理をコールバック関数で定義することができるのです。\nwithSuccessHandlerとは GAS関数（サーバーサイドの関数）が 正常に完了 して戻り値が返ってきた場合に、 実行する関数を定義することができます。 コーディングの仕方は下記の通りです。\ngoogle.script.run.withSuccessHandler(コールバック関数).GAS関数() それでは、シートから値を取得するgetSheetData()を同期処理で取得してアラートでその値を表示してみましょう。 先ほどはundefinedと返ってきましたが、シートのA1セルの値が表示されれば成功です。\n\u0026lt;script\u0026gt; function outputResult(result) { alert(result); } google.script.run.withSuccessHandler(outputResult).getSheetData(); \u0026lt;/script\u0026gt; 上記のコードは下記のようにコールバック関数をwithSuccessHandlerメソッドの引数として設定してコーディングすることができます。\n（少しコードの量が少なくなりますね！）\n\u0026lt;script\u0026gt; google.script.run.withSuccessHandler(function(result){ alert(result); }).getSheetData(); \u0026lt;/script\u0026gt; withFailureHandlerとは "
},
{
	"uri": "http://a-nakamura1015/gas-education/web/",
	"title": "Webアプリ編",
	"tags": [],
	"description": "",
	"content": "Chapter 4 Webアプリ編 Google Apps Script で Webアプリを作ってみよう！ "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/built_in_object/page_2_5_5/",
	"title": "Arrayオブジェクト",
	"tags": [],
	"description": "",
	"content": "Arrayオブジェクト "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/built_in_object/",
	"title": "組み込みオブジェクトを学ぼう",
	"tags": [],
	"description": "",
	"content": "Chapter 2 - 5 組み込みオブジェクト JavaScriptの組み込みオブジェクトを学びましょう！ "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/function/page_2_3_5/",
	"title": "スコープ",
	"tags": [],
	"description": "",
	"content": "スコープ "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/basic_syntax/page_2_1_5/",
	"title": "データ型",
	"tags": [],
	"description": "",
	"content": "データ型とは データ型とは、データの種類のことをいいます。例えば、データが「数値型」であれば四則演算で計算を行うことができますが、「文字列型」の場合は四則演算で計算を行うことができません。\nこのようにデータ型により実行できる処理が異なります。\nJavaScriptで扱うことができる主なデータ型は下記の通りです。\n   データ型 概要 データの例     数値型（Number） 整数値や浮動小数点値 10, 1.23   文字列型（String） 文字列 \u0026lsquo;Taro\u0026rsquo;, \u0026lsquo;123\u0026rsquo;   真偽型（Boolean） 真と偽のどちらかの値 true, false   null 値がないことを表す特殊な値 null   undefined 値が定義されていないことを表す特殊な値 undefined   配列型（Array） インデックスをキーとするデータの集合体 [1, 2, 3], [\u0026lsquo;太郎\u0026rsquo;, 20, true]   オブジェクト型（Object） プロパティをキーとするデータの集合体 {name: \u0026lsquo;太郎\u0026rsquo;, age: 20, isStudent: true}    これらのデータ型の値は リテラル といわれていて、変数や定数に格納して使用されます。\n他のプログミング言語（Javaなど）では、変数宣言時に指定したデータ型以外の値を入れることができないものもありますが、 JavaScriptはデータ型については寛容です。 例えば、数値型のデータを格納していた変数に文字列型のデータを代入することも可能です。\n 数値型（Number） 数値型は整数や小数以外にも16進数を扱うことができます。\n全角数値の場合やカンマが含まれている場合（例：1,000）は数値として扱われないため注意しましょう。\nfunction outputNumber() { console.log(10); // 10  console.log(1.23); // 1.23  console.log(0xFFFF); // 65535  console.log(100000000); // 1.0E7  console.log(0.0000001); // 1.0E-6 } 上記のサンプルを実行すると、「1.0E7」や「1.0E-6」という結果が表示されます。\nこれらは 指数表現 といい、整数部の桁数が7桁以上、小数点の桁数が6桁以上の数値は指数表記\n文字列型（String） JavaScriptでは文字列型の値を記述する場合はシングルクォーテーション（'）、またはダブルクォーテーション（\u0026quot;）で囲います。\nどちらを使ってもよいのですが、コーディングをする際はどちらかに統一するとコードが読みやすくなります。\nまた、シングルクォーテーションまたはダブルクォーテーションを文字列として使用したい場合は、 使用されていない方で囲うことになります。\nfunction outputString_1() { console.log(\u0026#39;Hello \u0026#34;Taro\u0026#34;!\u0026#39;); // Hello \u0026#34;Taro\u0026#34;!  console.log(\u0026#34;I\u0026#39;m Taro\u0026#34;); // I\u0026#39;m Taro } また、改行やタブなどの特別な文字はバックスラッシュ（\\）に指定文字を組み合わせることで表現することがdけいます。\nこれを エスケープシーケンス といいます。\nGASで使用するエスケープシーケンスは下記の通りです。\n   エスケープシーケンス 概要     \\n 改行   \\r 復帰   \\t タブ   \\\\ バックスラッシュ   \\\u0026rsquo; シングルクォーテーション   \\\u0026rdquo; ダブルクォーテーション    試しに下記のサンプルでエスケープシーケンスを確認してみましょう。\nfunction outputString_2() { /* Hello \u0026#39;GAS\u0026#39;! */ console.log(\u0026#39;Hello\\n\\\u0026#39;GAS\\\u0026#39;!\u0026#39;); } 真偽型（Boolean） 真偽型 は、trueとfalseのいずれかの値で表現する値です。 「正しい（true）または誤り（false）」、「Yes（true）またはNo（No）」といったどちらかの結果のみ扱う場合に使用します。\n真偽型は後々登場する条件式で活躍するため覚えておきましょう。\nnull null は値が存在しないことを意味します。\n数値の「0」や文字列の「’’」も値が存在しないという意味をしているように思えますが、 厳密には「0」という数値、「''」という文字列が存在しています。\n一方で、nullは本当の意味で値が存在しないこと意味しています。\n例えば、文字列型の変数の値がnullの場合は「変数に文字列は入っていない」という意味になります。 文字列型の変数の値が'\u0026lsquo;の場合は「変数に空文字（''）が入っている」という意味になります。\nどういうときに使うかといいますと、後々代入する予定の変数を初期化する際に使われることがあります。 これができて何が嬉しいの？と思われると思いますが、後々解説する制御構文でその意味がわかると思います。\nvar num = null; undefined undefined は値が未定義であることを意味します。\n例えば、下記のサンプルでは変数の宣言後に代入を行っていませんが、この変数のを参照するとundefinedとなっています。\nどの変数も宣言して代入するまではundefinedの状態になります。\nfunction outputUndefined() { var num; console.log(num); // undefined } "
},
{
	"uri": "http://a-nakamura1015/gas-education/introduction/page_5/",
	"title": "最後に",
	"tags": [],
	"description": "",
	"content": "ここまでで、皆さんはGASでコーディングした関数を実行することができるようになりました！\nでは早速GASのバリバリコーディングしていきましょう！と言いたいところですが、 GASをコーディングするにはJavaScriptの基礎構文や制御構文を理解できているか否かで、できることの幅が大きく変わってきます。\nそこで、次章では JavaScript基礎編 と題しまして、GASの実行環境でJavaScriptを動かしながら学んでいきます。\n"
},
{
	"uri": "http://a-nakamura1015/gas-education/web/page_5/",
	"title": "Web画面にスプレッドシートの値を表示してみましょう",
	"tags": [],
	"description": "",
	"content": "Scriptletについて google.script.run との違い Standard scriptlets Printing scriptlets スプレッドシートの値を表示する "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/page_3/",
	"title": "最後に",
	"tags": [],
	"description": "",
	"content": "最後に "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/built_in_object/page_2_5_6/",
	"title": "Functionオブジェクト",
	"tags": [],
	"description": "",
	"content": "Functionオブジェクト "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/basic_syntax/page_2_1_6/",
	"title": "配列",
	"tags": [],
	"description": "",
	"content": "配列とは これまでは変数や定数に値を一つずつ代入して扱ってきましたが、複数のデータを1つにまとめたくなるケースもあります。\n例えば、果物の名前を変数で管理したい場合は下記の通りになります。\nvar fruitsName_1 = \u0026#39;apple\u0026#39;; var fruitsName_2 = \u0026#39;grape\u0026#39;; var fruitsName_3 = \u0026#39;orange\u0026#39;; このように一つずつ変数を初期化して扱うことは可能ですが、非常に管理がしづらい問題が発生します。\n（さらに果物の名前の変数を作りたいとなった場合、fruiteName_Xの形式で変数名を作ることになりますが、今回の果物が何個目の果物なのかをわざわざ確認しないといけないですよね。）\nこのように、複数のデータをまとめて集合として扱うことができるデータを 配列 といいます。\n配列はカンマで値と区切り、全体を角括弧（[]）で囲むことで表現することができます。（これを 配列リテラル といいます。）\n[値1, 値2, ...] 配列は下記の図のように、複数の箱が連結しているような構造になっています。\nそれぞれの入れ物には番号が順番に割りふられており、番号は「0」から始まります。\nこの番号は インデックス といい、配列に格納されている値を 要素 といいます。\nまた、配列は変数に代入することもできます。\n下記のサンプルは果物の名前を配列で管理した場合のコードとなります。\nfunction outputArray_1() { var fruits = [\u0026#39;apple\u0026#39;, \u0026#39;grape\u0026#39;, \u0026#39;orange\u0026#39;]; console.log(fruits); // \u0026#39;apple\u0026#39;, \u0026#39;grape\u0026#39;, \u0026#39;orange\u0026#39; } 配列の要素の参照と代入 配列から特定の要素を取り出す場合はインデックスを用います。\n配列名[インデックス] 下記のサンプルは配列fruitsからインデックスが1の要素をログに出力しています。\nインデックスは0から始まるため、インデックスが1の要素は先頭から2番目の要素なので、「grape」が出力されます。\nfunction outputArray_2() { var fruits = [\u0026#39;apple\u0026#39;, \u0026#39;grape\u0026#39;, \u0026#39;orange\u0026#39;]; console.log(fruits[1]); // \u0026#39;grape\u0026#39; } また、配列内の特定の要素を代入で更新することもできます。\n配列名[インデックス] = 値; 配列内に指定したインデックスの要素が存在する場合は上書きされます。\n逆に、配列内に指定したインデックスの要素が存在しない場合は要素の追加がなされます。\nfunction outputArray_3() { var fruits = [\u0026#39;apple\u0026#39;, \u0026#39;grape\u0026#39;, \u0026#39;orange\u0026#39;]; fruits[4] = \u0026#39;peach\u0026#39;; console.log(fruits); // \u0026#39;apple\u0026#39;, \u0026#39;grape\u0026#39;, \u0026#39;orange\u0026#39;, null, peach  fruits[3] = \u0026#39;berry\u0026#39;; console.log(fruits); // \u0026#39;apple\u0026#39;, \u0026#39;grape\u0026#39;, \u0026#39;orange\u0026#39;, berry, peach } 二次元配列 "
},
{
	"uri": "http://a-nakamura1015/gas-education/web/page_6/",
	"title": "別画面に遷移してみましょう",
	"tags": [],
	"description": "",
	"content": "doGet関数で画面遷移ができるようにする パラメータで遷移先のページを指定できるようにする。 "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/built_in_object/page_2_5_7/",
	"title": "RegExpオブジェクト",
	"tags": [],
	"description": "",
	"content": "RegExpオブジェクトとは "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/basic_syntax/page_2_1_7/",
	"title": "オブジェクト",
	"tags": [],
	"description": "",
	"content": "オブジェクトとは "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/basic_syntax/page_2_1_8/",
	"title": "演算子",
	"tags": [],
	"description": "",
	"content": "演算子とは "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/built_in_object/page_2_5_8/",
	"title": "Errorオブジェクト",
	"tags": [],
	"description": "",
	"content": "Errorオブジェクト "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/built_in_object/page_2_5_9/",
	"title": "JSONオブジェクト",
	"tags": [],
	"description": "",
	"content": "JSONオブジェクトとは "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/function/page_2_3_2/",
	"title": "引数と戻り値",
	"tags": [],
	"description": "",
	"content": "引数と戻り値 "
},
{
	"uri": "http://a-nakamura1015/gas-education/javascript_bases/function/page_2_3_1/",
	"title": "宣言と呼び出し",
	"tags": [],
	"description": "",
	"content": "宣言と呼び出し "
},
{
	"uri": "http://a-nakamura1015/gas-education/",
	"title": "GAS Edu",
	"tags": [],
	"description": "",
	"content": "GAS Edu 本コンテンツはGAS初心者向けのハンズオン形式の教材となります。\nコンテンツ一覧 ※ 未公開のコンテンツは随時更新予定\n   No. コンテンツ名 ステータス     1 入門編 公開済   2 JavaScript基礎編 公開済   3 スプレッドシート編 未公開   4 Webアプリ編 公開済   5 Google ドライブ編 未公開   6 ローカル開発編 未公開    "
},
{
	"uri": "http://a-nakamura1015/gas-education/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]